name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-test.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-test.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TF_VERSION: '1.5.7'
  TF_WORKING_DIR: './terraform'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform Validation and Plan'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: |
          terraform init -backend=false
          for module in modules/*/; do
            echo "Initializing module: $module"
            terraform -chdir="$module" init -backend=false
          done
      
      - name: Terraform Validate
        id: validate
        run: |
          terraform validate -no-color
          for module in modules/*/; do
            echo "Validating module: $module"
            terraform -chdir="$module" validate -no-color
          done
      
      - name: TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest
      
      - name: Run TFLint
        run: |
          tflint --init
          tflint --format compact
          for module in modules/*/; do
            echo "Linting module: $module"
            tflint --chdir="$module" --format compact
          done
      
      - name: Checkov Security Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov.sarif
          skip_check: CKV_AZURE_88,CKV_AZURE_71
        continue-on-error: true
      
      - name: Upload Checkov SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov.sarif
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true
      
      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üé® \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            #### Checkov Security Scan üîí \`${{ steps.checkov.outcome }}\`
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  
  terraform-docs:
    name: 'Update Terraform Documentation'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Render Terraform Docs
        uses: terraform-docs/gh-actions@v1
        with:
          working-dir: terraform
          output-file: README.md
          output-method: inject
          git-push: true
          git-commit-message: "docs: auto-update terraform documentation"
  
  dependency-check:
    name: 'Dependency Security Check'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: terraform/
        continue-on-error: true
  
  cost-estimation:
    name: 'Terraform Cost Estimation'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Infracost
        uses: infracost/setup-infracost@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      
      - name: Generate Infracost Report
        run: |
          infracost breakdown \
            --path=terraform \
            --format=json \
            --out-file=/tmp/infracost.json
      
      - name: Post Infracost Comment
        uses: infracost/actions/comment@v1
        with:
          path: /tmp/infracost.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          behavior: update