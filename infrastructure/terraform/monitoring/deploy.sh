#!/bin/bash

# Prometheus IaC Deployment Script
# Following strict IaC-first approach

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}================================================${NC}"
echo -e "${GREEN}Prometheus Infrastructure Deployment${NC}"
echo -e "${GREEN}================================================${NC}"

# Check for required environment variables
check_env_vars() {
    local missing_vars=()
    
    [ -z "$TF_VAR_azure_subscription_id" ] && missing_vars+=("TF_VAR_azure_subscription_id")
    [ -z "$TF_VAR_azure_tenant_id" ] && missing_vars+=("TF_VAR_azure_tenant_id")
    [ -z "$TF_VAR_azure_client_id" ] && missing_vars+=("TF_VAR_azure_client_id")
    [ -z "$TF_VAR_azure_client_secret" ] && missing_vars+=("TF_VAR_azure_client_secret")
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        echo -e "${RED}Error: Missing required environment variables:${NC}"
        for var in "${missing_vars[@]}"; do
            echo -e "${RED}  - $var${NC}"
        done
        echo -e "${YELLOW}Please set these variables before running the deployment.${NC}"
        exit 1
    fi
}

# Generate self-signed certificates for testing (replace with real certs in production)
generate_test_certificates() {
    if [ -z "$TF_VAR_prometheus_tls_cert" ] || [ -z "$TF_VAR_prometheus_tls_key" ]; then
        echo -e "${YELLOW}Generating self-signed certificates for testing...${NC}"
        
        openssl req -x509 -newkey rsa:4096 -keyout /tmp/prometheus.key -out /tmp/prometheus.crt \
            -days 365 -nodes -subj "/CN=prometheus.monitoring.svc.cluster.local"
        
        export TF_VAR_prometheus_tls_cert=$(cat /tmp/prometheus.crt | base64 -w0)
        export TF_VAR_prometheus_tls_key=$(cat /tmp/prometheus.key | base64 -w0)
        
        rm -f /tmp/prometheus.key /tmp/prometheus.crt
    fi
}

# Generate random secrets if not provided
generate_secrets() {
    if [ -z "$TF_VAR_cookie_secret" ]; then
        export TF_VAR_cookie_secret=$(openssl rand -base64 32)
        echo -e "${YELLOW}Generated cookie secret for OAuth2 proxy${NC}"
    fi
    
    if [ -z "$TF_VAR_azure_storage_key" ]; then
        echo -e "${YELLOW}Note: Azure storage key will be generated by Terraform${NC}"
        export TF_VAR_azure_storage_key="placeholder"
    fi
}

# Set default OAuth values for testing
set_oauth_defaults() {
    if [ -z "$TF_VAR_oauth_client_id" ]; then
        export TF_VAR_oauth_client_id="test-client-id"
        export TF_VAR_oauth_client_secret="test-client-secret"
        echo -e "${YELLOW}Using test OAuth credentials. Replace with real values in production.${NC}"
    fi
}

# Initialize Terraform
terraform_init() {
    echo -e "${GREEN}Initializing Terraform...${NC}"
    terraform init
}

# Validate Terraform configuration
terraform_validate() {
    echo -e "${GREEN}Validating Terraform configuration...${NC}"
    terraform fmt -check
    terraform validate
}

# Plan Terraform deployment
terraform_plan() {
    echo -e "${GREEN}Planning Terraform deployment...${NC}"
    terraform plan -out=tfplan
}

# Apply Terraform configuration
terraform_apply() {
    echo -e "${GREEN}Applying Terraform configuration...${NC}"
    terraform apply tfplan
}

# Main deployment flow
main() {
    echo -e "${YELLOW}Starting Prometheus deployment...${NC}"
    
    # Check environment
    check_env_vars
    
    # Generate necessary secrets and certificates
    generate_test_certificates
    generate_secrets
    set_oauth_defaults
    
    # Run Terraform deployment
    terraform_init
    terraform_validate
    terraform_plan
    
    echo -e "${YELLOW}Review the plan above. Do you want to apply? (yes/no)${NC}"
    read -r response
    
    if [ "$response" = "yes" ]; then
        terraform_apply
        echo -e "${GREEN}âœ“ Prometheus deployment completed successfully!${NC}"
        
        # Show outputs
        echo -e "${GREEN}Deployment Outputs:${NC}"
        terraform output
    else
        echo -e "${RED}Deployment cancelled.${NC}"
        exit 1
    fi
}

# Run the deployment
main "$@"